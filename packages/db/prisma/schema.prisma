generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                Int                 @id @default(autoincrement())
  email             String?             @unique
  name              String?
  number            String              @unique
  password          String
  OnRampTransaction OnRampTransaction[]
  OfRampTransaction OfRampTransaction[]
  Balance           Balance[]           @relation("UserBalance")
  sentTransfers     p2pTransfer[]       @relation(name: "FromUserRelation")
  receivedTransfers p2pTransfer[]       @relation(name: "ToUserRelation")
  merchantTransfers UserToMerchantTransaction[] @relation(name: "UserMerchantRelation")
}

model Merchant {
  id          Int                         @id @default(autoincrement())
  email       String                      @unique
  name        String?
  auth_type   AuthType
  MerchantOfRampTransaction MerchantOfRampTransaction[]
  transactions UserToMerchantTransaction[] @relation(name: "MerchantRelation")
  Balance     Balance[]                   @relation("MerchantBalance")
}

model OnRampTransaction {
  id        Int          @id @default(autoincrement())
  status    OnRampStatus
  token     String       @unique
  provider  String
  amount    Int
  startTime DateTime
  userId    Int
  user      User         @relation(fields: [userId], references: [id])
}

model OfRampTransaction {
  id          Int              @id @default(autoincrement())
  status      OnRampStatus
  token       String             @unique
  bankAccount String
  accountNo   String
  startTime   DateTime
  userId      Int
  user         User            @relation(fields: [userId], references: [id])
  amount       Int
}

model MerchantOfRampTransaction {
  id          Int         @id @default(autoincrement())
  status      OnRampStatus
  token       String      @unique
  bankAccount String
  accountNo   String
  startTime   DateTime
  merchantId  Int
  merchant    Merchant    @relation(fields: [merchantId], references: [id])
  amount      Int
}


model Balance {
  id         Int       @id @default(autoincrement())
  userId     Int?      @unique
  merchantId Int?      @unique
  amount     Int
  locked     Int
  user       User?     @relation("UserBalance", fields: [userId], references: [id], onDelete: Cascade)
  merchant   Merchant? @relation("MerchantBalance", fields: [merchantId], references: [id], onDelete: Cascade)
}

model p2pTransfer {
  id         Int          @id @default(autoincrement())
  amount     Int
  timestamp  DateTime
  fromUserId Int
  fromUser   User         @relation(name: "FromUserRelation", fields: [fromUserId], references: [id])
  toUserId   Int
  toUser     User         @relation(name: "ToUserRelation", fields: [toUserId], references: [id])
}

model UserToMerchantTransaction {
  id          Int      @id @default(autoincrement())
  amount      Int
  timestamp   DateTime
  userId      Int
  user        User     @relation(name: "UserMerchantRelation", fields: [userId], references: [id])
  merchantId  Int
  merchant    Merchant @relation(name: "MerchantRelation", fields: [merchantId], references: [id])
}

enum AuthType {
  Google
  Github
}

enum OnRampStatus {
  Success
  Failure
  Processing
}
